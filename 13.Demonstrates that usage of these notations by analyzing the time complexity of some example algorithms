import time
import math

def constant_time_algorithm(n):
    print("Running constant time algorithm...")
    result = 0
    for _ in range(10):
        result += 1
    return result

def linear_time_algorithm(n):
    print("Running linear time algorithm...")
    result = 0
    for i in range(n):
        result += i
    return result

def quadratic_time_algorithm(n):
    print("Running quadratic time algorithm...")
    result = 0
    for i in range(n):
        for j in range(n):
            result += i * j
    return result

def exponential_time_algorithm(n):
    print("Running exponential time algorithm...")
    result = 0
    for i in range(2**n):
        result += i
    return result

def analyze_time_complexity():
    n_values = [100, 500, 1000, 2000, 5000]
    for n in n_values:
        print(f"Analyzing time complexity for n = {n}...")
        start_time = time.time()
        constant_time_algorithm(n)
        end_time = time.time()
        constant_time = end_time - start_time

        start_time = time.time()
        linear_time_algorithm(n)
        end_time = time.time()
        linear_time = end_time - start_time

        start_time = time.time()
        quadratic_time_algorithm(n)
        end_time = time.time()
        quadratic_time = end_time - start_time

        start_time = time.time()
        exponential_time_algorithm(n)
        end_time = time.time()
        exponential_time = end_time - start_time

        print(f"n = {n}:")
        print(f"Constant time algorithm: O(1), Time: {constant_time:.6f} seconds")
        print(f"Linear time algorithm: O(n), Time: {linear_time:.6f} seconds")
        print(f"Quadratic time algorithm: O(n^2), Time: {quadratic_time:.6f} seconds")
        print(f"Exponential time algorithm: O(2^n), Time: {exponential_time:.6f} seconds")
        print("")

analyze_time_complexity()
