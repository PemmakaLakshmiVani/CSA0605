class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            if self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            elif self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1

def smallest_string(s, pairs):
    uf = UnionFind(len(s))
    for a, b in pairs:
        uf.union(a, b)

    groups = {}
    for i, c in enumerate(s):
        root = uf.find(i)
        if root not in groups:
            groups[root] = []
        groups[root].append(c)

    for group in groups.values():
        group.sort(reverse=True)

    result = []
    for i in range(len(s)):
        root = uf.find(i)
        result.append(groups[root].pop())

    return ''.join(result)

# Test the code
s = "dcab"
pairs = [[0, 3], [1, 2]]
output = smallest_string(s, pairs)
print("Output:", output)
