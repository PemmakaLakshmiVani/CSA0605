class Solution:
    def search(self, nums: List[int], target: int) -> int:
        # Initialize the search boundaries
        left, right = 0, len(nums) - 1

        # Perform binary search
        while left <= right:
            mid = (left + right) // 2

            # If the target is found, return its index
            if nums[mid] == target:
                return mid

            # If the left half is sorted
            if nums[left] <= nums[mid]:
                # If the target is in the left half, update the right boundary
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                # Otherwise, update the left boundary
                else:
                    left = mid + 1
            # If the right half is sorted
            else:
                # If the target is in the right half, update the left boundary
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                # Otherwise, update the right boundary
                else:
                    right = mid - 1

        # If the target is not found, return -1
        return -1

# Example usage
def printResult(nums, target, result):
    print("Array:", nums)
    print("Target:", target)
    print("Result:", result)
    print()

# Create the input array and target
nums = [4, 5, 6, 7, 0, 1, 2]
target = 0

# Search for the target in the array
solution = Solution()
result = solution.search(nums, target)

# Print the result
printResult(nums, target, result)

# Create the input array and target
nums = [4, 5, 6, 7, 0, 1, 2]
target = 3

# Search for the target in the array
solution = Solution()
result = solution.search(nums, target)

# Print the result
printResult(nums, target, result)

# Create the input array and target
nums = [1]
target = 0

# Search for the target in the array
solution = Solution()
result = solution.search(nums, target)

# Print the result
printResult(nums, target, result)
