import heapq

def kClosest(points, k):
    # Compute the squared distance for each point
    def distance(point):
        return point[0] ** 2 + point[1] ** 2

    # Use a max-heap to keep track of the k closest points
    max_heap = []
    
    for point in points:
        # Push the negative distance to simulate a max-heap using heapq (which is a min-heap)
        heapq.heappush(max_heap, (-distance(point), point))
        if len(max_heap) > k:
            heapq.heappop(max_heap)
    
    # Extract the points from the heap
    return [point for _, point in max_heap]

# Example 1
points1 = [[1, 3], [-2, 2], [5, 8], [0, 1]]
k1 = 2
print(f"The {k1} closest points to the origin are: {kClosest(points1, k1)}")

# Example 2
points2 = [[1, 3], [-2, 2]]
k2 = 1
print(f"The {k2} closest point to the origin is: {kClosest(points2, k2)}")

# Example 3
points3 = [[3, 3], [5, -1], [-2, 4]]
k3 = 2
print(f"The {k3} closest points to the origin are: {kClosest(points3, k3)}")
