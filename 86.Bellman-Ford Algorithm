def mouseCatGame(graph):
    from collections import defaultdict
    
    n = len(graph)
    memo = {}
    
    def dfs(mouse, cat, turn):
        if mouse == 0:  # Mouse reaches the hole
            return 1
        if mouse == cat:  # Cat catches the mouse
            return 2
        if (mouse, cat, turn) in memo:  # Memoization check
            return memo[(mouse, cat, turn)]
        
        if turn == 0:  # Mouse's turn
            for next_mouse in graph[mouse]:
                if dfs(next_mouse, cat, 1) == 1:  # If mouse can win
                    memo[(mouse, cat, turn)] = 1
                    return 1
            memo[(mouse, cat, turn)] = 0  # If no winning move, it's a draw
            return 0
        else:  # Cat's turn
            for next_cat in graph[cat]:
                if next_cat != 0 and dfs(mouse, next_cat, 0) == 2:  # If cat can win
                    memo[(mouse, cat, turn)] = 2
                    return 2
            memo[(mouse, cat, turn)] = 0  # If no winning move for the cat, it's a draw
            return 0

    return dfs(1, 2, 0)

# Example usage
graph1 = [[2, 5], [3], [0, 4, 5], [1, 4, 5], [2, 3], [0, 2, 3]]
print(mouseCatGame(graph1))  # Output: 0

graph2 = [[1, 3], [0], [3], [0, 2]]
print(mouseCatGame(graph2))  # Output: 1
