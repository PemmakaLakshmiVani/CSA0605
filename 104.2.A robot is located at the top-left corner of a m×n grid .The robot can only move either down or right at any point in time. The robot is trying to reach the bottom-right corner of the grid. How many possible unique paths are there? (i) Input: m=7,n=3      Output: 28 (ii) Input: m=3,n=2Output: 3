from math import comb

def uniquePaths(m, n):
    # Use combinatorial approach
    return comb(m + n - 2, m - 1)

def uniquePathsDP(m, n):
    # Initialize the DP table with 1's
    dp = [[1] * n for _ in range(m)]
    
    # Fill the DP table
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
    
    return dp[m - 1][n - 1]

# Example 1
m1, n1 = 7, 3
print(f"Number of unique paths for m={m1}, n={n1} (Combinatorial): {uniquePaths(m1, n1)}")
print(f"Number of unique paths for m={m1}, n={n1} (DP): {uniquePathsDP(m1, n1)}")

# Example 2
m2, n2 = 3, 2
print(f"Number of unique paths for m={m2}, n={n2} (Combinatorial): {uniquePaths(m2, n2)}")
print(f"Number of unique paths for m={m2}, n={n2} (DP): {uniquePathsDP(m2, n2)}")
