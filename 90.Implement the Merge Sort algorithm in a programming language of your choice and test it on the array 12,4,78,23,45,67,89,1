class MergeSort:
    def __init__(self):
        self.comparisons = 0

    def merge_sort(self, arr):
        if len(arr) <= 1:
            return arr
        
        mid = len(arr) // 2
        left_half = self.merge_sort(arr[:mid])
        right_half = self.merge_sort(arr[mid:])
        
        return self.merge(left_half, right_half)

    def merge(self, left, right):
        sorted_array = []
        i = j = 0
        
        while i < len(left) and j < len(right):
            self.comparisons += 1  # Count comparison
            if left[i] <= right[j]:
                sorted_array.append(left[i])
                i += 1
            else:
                sorted_array.append(right[j])
                j += 1
        
        # Collect remaining elements
        sorted_array.extend(left[i:])
        sorted_array.extend(right[j:])
        
        return sorted_array

# Test Cases
test_cases = [
    (8, [12, 4, 78, 23, 45, 67, 89, 1]),
    (7, [38, 27, 43, 3, 9, 82, 10])
]

for N, arr in test_cases:
    merge_sort_instance = MergeSort()
    sorted_arr = merge_sort_instance.merge_sort(arr)
    comparisons = merge_sort_instance.comparisons
    print(f"Input: N={N}, a={arr} => Output: {', '.join(map(str, sorted_arr))}, Comparisons: {comparisons}")
