def floyd_warshall(n, edges):
    dist = [[float('inf')] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
    
    for from_city, to_city, weight in edges:
        dist[from_city][to_city] = min(dist[from_city][to_city], weight)
        dist[to_city][from_city] = min(dist[to_city][from_city], weight)

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
                    
    return dist

def findTheCity(n, edges, distanceThreshold):
    dist = floyd_warshall(n, edges)
    
    city_with_min_reachable = -1
    min_count = float('inf')

    for i in range(n):
        reachable_count = sum(1 for j in range(n) if dist[i][j] <= distanceThreshold and i != j)
        
        if reachable_count < min_count or (reachable_count == min_count and i > city_with_min_reachable):
            min_count = reachable_count
            city_with_min_reachable = i

    return city_with_min_reachable

# Example usage
n1 = 4
edges1 = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distanceThreshold1 = 4
print(findTheCity(n1, edges1, distanceThreshold1))  # Output: 3

n2 = 5
edges2 = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]
distanceThreshold2 = 2
print(findTheCity(n2, edges2, distanceThreshold2))  # Output: 0
