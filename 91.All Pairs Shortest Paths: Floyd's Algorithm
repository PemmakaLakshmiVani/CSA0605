import numpy as np

def floyd_warshall(n, edges):
    # Initialize distance matrix with infinity
    dist = np.full((n, n), np.inf)
    
    # Set distance from each city to itself as 0
    for i in range(n):
        dist[i][i] = 0

    # Populate the distance matrix with initial edges
    for u, v, w in edges:
        dist[u][v] = min(dist[u][v], w)  # In case of multiple edges between same nodes

    # Display initial distance matrix
    print("Initial distance matrix:")
    print(dist)

    # Floyd-Warshall Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    # Display final distance matrix
    print("Distance matrix after applying Floyd's Algorithm:")
    print(dist)

    return dist

def shortest_path(dist, start, end):
    return dist[start][end]

# Test case a
print("Test Case a:")
n_a = 4
edges_a = [
    [0, 1, 3],  # City 1 to City 2
    [0, 2, 8],  # City 1 to City 3
    [0, 3, -4], # City 1 to City 4
    [1, 3, 4],  # City 2 to City 4
    [1, 2, 1],  # City 2 to City 3
    [2, 0, 2],  # City 3 to City 1
    [3, 2, -5], # City 4 to City 3
    [3, 1, 6]   # City 4 to City 2
]
dist_a = floyd_warshall(n_a, edges_a)
shortest_a = shortest_path(dist_a, 0, 2)  # City 1 (0) to City 3 (2)
print(f"City 1 to City 3 = {shortest_a}")

# Test case b
print("\nTest Case b:")
n_b = 6
edges_b = [
    [0, 1, 1],  # Router A to Router B
    [0, 2, 5],  # Router A to Router C
    [1, 2, 2],  # Router B to Router C
    [1, 3, 1],  # Router B to Router D
    [2, 4, 3],  # Router C to Router E
    [3, 4, 1],  # Router D to Router E
    [3, 5, 6],  # Router D to Router F
    [4, 5, 2]   # Router E to Router F
]
dist_b = floyd_warshall(n_b, edges_b)
shortest_b = shortest_path(dist_b, 0, 5)  # Router A (0) to Router F (5)
print(f"Router A to Router F = {shortest_b}")
