import math

def distance(p1, p2):
    """Calculate the Euclidean distance between two points."""
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def closest_pair(points):
    """Find the closest pair of points using divide and conquer."""
    def closest_pair_recursive(points_sorted_x, points_sorted_y):
        if len(points_sorted_x) <= 3:
            return brute_force(points_sorted_x)

        mid = len(points_sorted_x) // 2
        mid_x = points_sorted_x[mid][0]

        left_sorted_x = points_sorted_x[:mid]
        right_sorted_x = points_sorted_x[mid:]
        left_sorted_y = [point for point in points_sorted_y if point[0] < mid_x]
        right_sorted_y = [point for point in points_sorted_y if point[0] >= mid_x]

        left_closest = closest_pair_recursive(left_sorted_x, left_sorted_y)
        right_closest = closest_pair_recursive(right_sorted_x, right_sorted_y)

        min_distance = min(left_closest[2], right_closest[2])
        closest_split = closest_split_pair(points_sorted_x, points_sorted_y, mid_x, min_distance)

        if closest_split is None:
            return left_closest if left_closest[2] < right_closest[2] else right_closest
        else:
            return closest_split

    def brute_force(points):
        min_distance = float('inf')
        closest_pair = None
        for i in range(len(points)):
            for j in range(i + 1, len(points)):
                dist = distance(points[i], points[j])
                if dist < min_distance:
                    min_distance = dist
                    closest_pair = (points[i], points[j], dist)
        return closest_pair

    def closest_split_pair(points_sorted_x, points_sorted_y, mid_x, min_distance):
        points_in_strip = [point for point in points_sorted_y if abs(point[0] - mid_x) < min_distance]
        closest_split = None
        for i in range(len(points_in_strip)):
            for j in range(i + 1, min(len(points_in_strip), i + 7)):
                dist = distance(points_in_strip[i], points_in_strip[j])
                if dist < min_distance:
                    min_distance = dist
                    closest_split = (points_in_strip[i], points_in_strip[j], dist)
        return closest_split

    points_sorted_x = sorted(points)
    points_sorted_y = sorted(points, key=lambda x: x[1])
    return closest_pair_recursive(points_sorted_x, points_sorted_y)

# Example usage
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
closest = closest_pair(points)
print("Closest pair of points:", closest[0], closest[1])
print("Distance:", closest[2])
