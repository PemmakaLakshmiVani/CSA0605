from itertools import combinations

def subset_sums(arr):
    """Generate all possible subset sums for the given array."""
    n = len(arr)
    sums = set()
    # Generate all subsets using combinations
    for i in range(n + 1):
        for comb in combinations(arr, i):
            sums.add(sum(comb))
    return sums

def meet_in_the_middle(arr, target):
    # Split the array into two halves
    n = len(arr)
    left_half = arr[:n//2]
    right_half = arr[n//2:]
    
    # Get all subset sums for each half
    left_sums = subset_sums(left_half)
    right_sums = subset_sums(right_half)
    
    # Check if any sum from the left half combined with the right half matches the target
    for left_sum in left_sums:
        if (target - left_sum) in right_sums:
            return True
    
    return False

# Example 1
E1 = [1, 3, 9, 2, 7, 12]
target1 = 15
result1 = meet_in_the_middle(E1, target1)
print(f"Is there a subset that sums to {target1} in set {E1}? {result1}")

# Example 2
E2 = [3, 34, 4, 12, 5, 2]
target2 = 15
result2 = meet_in_the_middle(E2, target2)
print(f"Is there a subset that sums to {target2} in set {E2}? {result2}")
