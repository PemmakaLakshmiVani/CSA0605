import heapq

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        # Create a priority queue to store the nodes to be merged
        queue = []
        for i, node in enumerate(lists):
            if node:
                heapq.heappush(queue, (node.val, i, node))

        # Create a dummy node to simplify the code
        dummy = ListNode()
        current = dummy

        # Merge the k lists
        while queue:
            val, i, node = heapq.heappop(queue)
            current.next = node
            current = current.next
            if node.next:
                heapq.heappush(queue, (node.next.val, i, node.next))

        # Return the head of the merged list
        return dummy.next

# Example usage
def printList(node):
    while node:
        print(node.val, end=" ")
        node = node.next
    print()

# Create the k linked lists
lists = [
    ListNode(1, ListNode(4, ListNode(5))),
    ListNode(1, ListNode(3, ListNode(4))),
    ListNode(2, ListNode(6))
]

# Merge the k lists
solution = Solution()
mergedList = solution.mergeKLists(lists)

# Print the merged list
print("Merged List:")
printList(mergedList)
