def is_safe(graph, colors, vertex, color):
    for neighbor in graph[vertex]:
        if colors[neighbor] == color:
            return False
    return True

def graph_coloring_util(graph, m, colors, vertex):
    if vertex == len(graph):
        return 0

    max_colored = 0

    for color in range(1, m + 1):
        if is_safe(graph, colors, vertex, color):
            colors[vertex] = color
            max_colored = max(max_colored, 1 + graph_coloring_util(graph, m, colors, vertex + 1))
            colors[vertex] = 0  # Backtrack

    # Explore the option of not coloring this vertex
    max_colored = max(max_colored, graph_coloring_util(graph, m, colors, vertex + 1))

    return max_colored

def graph_coloring(graph, m):
    colors = [0] * len(graph)
    return graph_coloring_util(graph, m, colors, 0)

# Representing the graph as an adjacency list
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4  # Number of vertices
graph = {i: [] for i in range(n)}

for u, v in edges:
    graph[u].append(v)
    graph[v].append(u)

# Number of colors (k) available
k = 3

# Find the maximum number of regions you can color
max_colored_regions = graph_coloring(graph, k)
print(f"Maximum number of regions you can color: {max_colored_regions}")
