class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Merges two sorted arrays into a single array sorted in non-decreasing order.

        Args:
            nums1 (List[int]): The first sorted array with a length of m + n.
            m (int): The number of elements in nums1 that should be merged.
            nums2 (List[int]): The second sorted array with a length of n.
            n (int): The number of elements in nums2.

        Returns:
            None
        """
        # Initialize pointers for nums1 and nums2
        i, j = m - 1, n - 1
        # Initialize a pointer for the result array
        k = m + n - 1

        # Merge smaller elements first
        while i >= 0 and j >= 0:
            if nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
            k -= 1

        # Copy any remaining elements from nums2
        while j >= 0:
            nums1[k] = nums2[j]
            j -= 1
            k -= 1

# Example usage
def printResult(nums1, m, nums2, n):
    print("Merged array:", nums1[:m + n])
    print()

# Create the input arrays
nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3

# Merge the arrays
solution = Solution()
solution.merge(nums1, m, nums2, n)

# Print the result
printResult(nums1, m, nums2, n)

# Create the input arrays
nums1 = [1]
m = 1
nums2 = []
n = 0

# Merge the arrays
solution = Solution()
solution.merge(nums1, m, nums2, n)

# Print the result
printResult(nums1, m, nums2, n)

# Create the input arrays
nums1 = [0]
m = 0
nums2 = [1]
n = 1

# Merge the arrays
solution = Solution()
solution.merge(nums1, m, nums2, n)

# Print the result
printResult(nums1, m, nums2, n)
