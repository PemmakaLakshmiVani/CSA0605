from itertools import combinations

def subset_sums(arr):
    """Generate all possible subset sums for the given array."""
    n = len(arr)
    sums = []
    # Generate all subsets using combinations
    for i in range(n+1):
        for comb in combinations(arr, i):
            sums.append(sum(comb))
    return sums

def meet_in_the_middle(arr, target):
    # Split the array into two halves
    n = len(arr)
    left_half = arr[:n//2]
    right_half = arr[n//2:]
    
    # Get all subset sums for each half
    left_sums = subset_sums(left_half)
    right_sums = subset_sums(right_half)
    
    # Sort the sums for binary search-like approach
    left_sums.sort()
    right_sums.sort()
    
    # Initialize the closest sum and difference from the target
    closest_sum = float('inf')
    min_diff = float('inf')
    
    # Use two pointers to find the closest sum
    i, j = 0, len(right_sums) - 1
    while i < len(left_sums) and j >= 0:
        current_sum = left_sums[i] + right_sums[j]
        current_diff = abs(current_sum - target)
        
        # Update the closest sum if we find a better one
        if current_diff < min_diff:
            min_diff = current_diff
            closest_sum = current_sum
        
        # Adjust pointers based on whether the current sum is less or greater than the target
        if current_sum < target:
            i += 1
        else:
            j -= 1
    
    return closest_sum

# Example 1
set1 = [45, 34, 4, 12, 5, 2]
target1 = 42
result1 = meet_in_the_middle(set1, target1)
print(f"Closest sum to {target1} in set {set1}: {result1}")

# Example 2
set2 = [1, 3, 2, 7, 4, 6]
target2 = 10
result2 = meet_in_the_middle(set2, target2)
print(f"Closest sum to {target2} in set {set2}: {result2}")
