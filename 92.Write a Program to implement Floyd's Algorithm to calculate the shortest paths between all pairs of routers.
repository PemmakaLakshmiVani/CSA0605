import numpy as np

def floyd_warshall(n, edges):
    # Initialize distance matrix with infinity
    dist = np.full((n, n), np.inf)

    # Set distance from each router to itself as 0
    for i in range(n):
        dist[i][i] = 0

    # Populate the distance matrix with initial edges
    for u, v, w in edges:
        dist[u][v] = min(dist[u][v], w)  # Handle multiple edges

    return dist

def update_distance(dist, u, v):
    dist[u][v] = np.inf
    dist[v][u] = np.inf  # Since it's undirected

def floyd_warshall_algorithm(dist):
    n = dist.shape[0]
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

def shortest_path(dist, start, end):
    return dist[start][end]

# Test case for routers
print("Router Network Example:")
n_routers = 6
edges_routers = [
    [0, 1, 1],  # A to B
    [0, 2, 5],  # A to C
    [1, 2, 2],  # B to C
    [1, 3, 1],  # B to D
    [2, 4, 3],  # C to E
    [3, 4, 1],  # D to E
    [3, 5, 6],  # D to F
    [4, 5, 2]   # E to F
]

# Initial distance matrix
dist_routers = floyd_warshall(n_routers, edges_routers)
print("Initial Distance Matrix:")
print(dist_routers)

# Apply Floyd-Warshall algorithm
floyd_warshall_algorithm(dist_routers)
print("Distance Matrix after Floyd's Algorithm:")
print(dist_routers)

# Shortest path before link failure (A to F)
shortest_before_failure = shortest_path(dist_routers, 0, 5)
print(f"Router A to Router F = {shortest_before_failure}")

# Simulate the failure of the link between Router B and Router D
update_distance(dist_routers, 1, 3)  # B to D fails
floyd_warshall_algorithm(dist_routers)  # Reapply Floyd-Warshall

# Shortest path after link failure (A to F)
shortest_after_failure = shortest_path(dist_routers, 0, 5)
print(f"Router A to Router F after link failure = {shortest_after_failure}")

# Test case for cities
print("\nCity Network Example:")
n_cities = 5
edges_cities = [
    [0, 1, 2],  # 0 to 1
    [0, 4, 8],  # 0 to 4
    [1, 2, 3],  # 1 to 2
    [1, 4, 2],  # 1 to 4
    [2, 3, 1],  # 2 to 3
    [3, 4, 1]   # 3 to 4
]

# Initial distance matrix
dist_cities = floyd_warshall(n_cities, edges_cities)
print("Initial Distance Matrix for Cities:")
print(dist_cities)

# Apply Floyd-Warshall algorithm
floyd_warshall_algorithm(dist_cities)
print("Distance Matrix after Floyd's Algorithm for Cities:")
print(dist_cities)

# Example shortest path queries
shortest_c_to_a = shortest_path(dist_cities, 2, 0)  # C to A
print(f"Shortest path from C to A = {shortest_c_to_a}")

shortest_e_to_c = shortest_path(dist_cities, 4, 2)  # E to C
print(f"Shortest path from E to C = {shortest_e_to_c}")

# Additional test case for cities
print("\nAnother City Network Example:")
additional_edges_cities = [
    [4, 2, 2],  # E to C
    [0, 1, 4],  # A to B
    [1, 2, 1],  # B to C
    [1, 4, 6],  # B to E
    [4, 0, 1],  # E to A
    [0, 3, 5],  # A to D
    [3, 4, 2],  # D to E
    [4, 3, 1],  # E to D
    [3, 2, 1],  # D to C
    [2, 3, 3]   # C to D
]

# Adding new edges to distance matrix
dist_cities = floyd_warshall(n_cities, additional_edges_cities)
floyd_warshall_algorithm(dist_cities)
shortest_e_to_c_2 = shortest_path(dist_cities, 4, 2)  # E to C
print(f"Router E to Router C = {shortest_e_to_c_2}")
